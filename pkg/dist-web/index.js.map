{"version":3,"file":"index.js","sources":["../dist-src/index.js"],"sourcesContent":["import _retry from 'async-retry';\nimport R from 'ramda';\nconst {\n  anyPass,\n  both,\n  complement,\n  compose,\n  constructN,\n  curry,\n  is,\n  ifElse,\n  invoker,\n  map,\n  propEq,\n  when,\n  type\n} = R;\n\nconst raise = err => {\n  throw err;\n};\n\nconst instanceOf = propEq('name');\n\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst until = timestampMs => timestampMs - Date.now();\n\nconst typeEq = curry((string, thing) => type(thing) === string);\nconst isDeltaSeconds = compose(both(typeEq('Number'), complement(Number.isNaN)), parseInt);\nconst getHeader = curry((header, response) => response.headers.get(header));\nconst getRateLimitReset = getHeader('RateLimit-Reset');\n\nclass RetryableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'RetryableError';\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, RetryableError);\n    }\n  }\n\n}\n\nconst knownErrors = ['RetryableError', 'FetchError', 'AbortError'];\nconst isRetryableError = both(is(Error), anyPass(map(instanceOf, knownErrors)));\nconst isRetryableStatus = anyPass([status => status >= 500 && status < 600, status => status === 429]);\n\nconst forceRetry = () => raise(new RetryableError('Retrying...'));\n/**\n * Retries up to `max` attempts only if `fetcher`:\n * - returns a `Response` with `status` 429 or 500â€“599\n * - throws a `FetchError` or `AbortError`\n * If retries exceed `max`, then the response is passed along,\n * whether an error or a response with a bad status.\n * Use retry behavior before handling bad statuses.\n * @async\n * @param {number} max\n * @param {() => Promise<Response>} fetcher\n * @returns {Promise<Response>}\n * @example\n * const fetchUserById = (id) => fetch(`/users/${id}`);\n * const safeFetchUserById = retry(3, () => fetchUserById(1));\n */\n\n\nconst retry = curry((max, fetcher) => _retry(async (bail, tries) => {\n  const canRetry = tries < max + 1;\n  return fetcher().then(async res => {\n    const resetHeader = getRateLimitReset(res);\n\n    if (resetHeader && res.status === 429) {\n      isDeltaSeconds(resetHeader) ? await compose(wait, sec => sec * 1000, parseInt)(resetHeader) : await compose(wait, until, invoker(0, 'getTime'), constructN(1, Date))(resetHeader);\n    }\n\n    return res;\n  }).then(when(res => isRetryableStatus(res.status) && canRetry, forceRetry)).catch(ifElse(isRetryableError, raise, bail));\n}, {\n  retries: max,\n  minTimeout: 10,\n  factor: 5\n}));\nexport default retry;"],"names":[],"mappings":"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"}